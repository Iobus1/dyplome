import os
import asyncio
import aiohttp
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from database import init_db, search_knowledge_base, save_to_db, FREQUENT_QUESTIONS


load_dotenv("keys.env")
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_CX_ID = os.getenv("GOOGLE_CX_ID")

if not BOT_TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

if not GOOGLE_API_KEY or not GOOGLE_CX_ID:
    raise ValueError("‚ùå Google API –∫–ª—é—á –∏–ª–∏ CX ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ keys.env!")

init_db()

LEARNING_COMMANDS = [
    ["üìö –ù–∞–π—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª", "üß† –ó–∞–ø–æ–º–Ω–∏—Ç—å"],
    ["üîç –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "‚ùì –ü–æ–º–æ—â—å"]
]


async def get_educational_info(query: str) -> str:
    """–ü–æ–∏—Å–∫ –æ–±—É—á–∞—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞—Ö"""
    allowed_sites = [
        "khanacademy.org", "wikipedia.org", "britannica.com",
        "coursera.org", "edx.org", "nauka.ru",
        "edu.ru", "habr.com", "sparknotes.com"
    ]
    site_filter = " OR ".join([f"site:{site}" for site in allowed_sites])
    full_query = f"{query} {site_filter}"

    url = f"https://www.googleapis.com/customsearch/v1?q={full_query}&key={GOOGLE_API_KEY}&cx={GOOGLE_CX_ID}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
                data = await response.json()
                for item in data.get("items", []):
                    title = item.get("title")
                    snippet = item.get("snippet")
                    link = item.get("link")
                    if title and snippet and link:
                        return f"<b>{title}</b>\n\n{snippet}\n\nüîó {link}"
                return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –æ–±—É—á–∞—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö."


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ <b>–£—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ 2025</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—É—á–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–µ–º–∞–º.\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "- –ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?\n"
        "- –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å?\n"
        "- –¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ.",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup(LEARNING_COMMANDS, resize_keyboard=True)
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ FREQUENT_QUESTIONS
    for key in FREQUENT_QUESTIONS:
        if key in query:
            await update.message.reply_text(
                f"üìò <b>–û—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:</b>\n\n{FREQUENT_QUESTIONS[key]}",
                parse_mode='HTML'
            )
            return

    if not query:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±—É—á–∞—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ —Å–∞–º—ã—Ö —Ä–∞–∑–Ω—ã—Ö –≤–µ—â–∞—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∞—É–∫–æ–π, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏, –∏—Å—Ç–æ—Ä–∏–µ–π, –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º. "
            "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –Ω–∞—á–∞—Ç—å:\n"
            "‚Ä¢ –ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
            "‚Ä¢ –ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∏ –≥–¥–µ –æ–Ω–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–æ—Ä–µ–º—ã –≤ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Å—Ç–æ–∏—Ç –∑–Ω–∞—Ç—å?\n"
            "‚Ä¢ –û–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n\n"
            "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∏ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. "
            "–ï—Å–ª–∏ –≤ –º–æ–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, —è –≤—ã–ø–æ–ª–Ω—é –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–¥–µ–∂–Ω—ã–º –≤–Ω–µ—à–Ω–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç, "
            "–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."
        )
        return

    # –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    answer_from_db = search_knowledge_base(query)
    if answer_from_db and not answer_from_db.lower().startswith("–∏–∑–≤–∏–Ω–∏—Ç–µ"):
        await update.message.reply_text(
            f"üìò <b>–û—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:</b>\n\n{answer_from_db}\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ç–µ–º—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –≤–∞–º –µ—â–µ –ª—É—á—à–µ.",
            parse_mode='HTML'
        )
        return

    # –ó–∞–ø—Ä–æ—Å –∫ Google Custom Search –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    try:
        result = await get_educational_info(query)
        await update.message.reply_text(
            f"üåê <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b>\n\n{result}\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–≤–æ—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –±—É–¥—É—â–µ–º, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üß† –ó–∞–ø–æ–º–Ω–∏—Ç—å¬ª.",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup([["üß† –ó–∞–ø–æ–º–Ω–∏—Ç—å"]], one_time_keyboard=True)
        )
        context.user_data['last_response'] = (query, result)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–¥–Ω–µ–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å.",
            parse_mode='HTML'
        )


async def save_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'last_response' not in context.user_data:
        await update.message.reply_text("‚ùå –ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
        return

    question, answer = context.user_data['last_response']
    try:
        save_to_db(question, answer)
        await update.message.reply_text("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π!")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^üß† –ó–∞–ø–æ–º–Ω–∏—Ç—å$"), save_response))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –û–±—É—á–∞—é—â–∏–π —á–∞—Ç-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()


if __name__ == '__main__':
    main()
