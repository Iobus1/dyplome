import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from database import init_db, search_knowledge_base, save_to_db
import requests

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv("keys.env")  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–Ω–∞—á–µ
API_KEY = os.getenv("TELEGRAM_TOKEN")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
CX = os.getenv("GOOGLE_CX_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ API_KEY
if not API_KEY:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª keys.env –∏ –ø—É—Ç—å –∫ –Ω–µ–º—É.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

def start(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø Telegram-–±–æ—Ç. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.")

def search_internet(query):
    url = f"https://www.googleapis.com/customsearch/v1?q={query}&key={GOOGLE_API_KEY}&cx={CX}"
    response = requests.get(url)
    if response.status_code == 200:
        results = response.json()
        if 'items' in results:
            first_item = results['items'][0]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ 'snippet' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if 'snippet' in first_item:
                return first_item['snippet']
            # –ï—Å–ª–∏ –Ω–µ—Ç 'snippet', –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            elif 'link' in first_item:
                return f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–æ –≤–æ—Ç —Å—Å—ã–ª–∫–∞: {first_item['link']}"
            return "–û–ø–∏—Å–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."
    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."



def handle_message(update: Update, context: CallbackContext):
    user_input = update.message.text.strip().lower()

    simple_responses = {
        "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        "–∫—Ç–æ —Ç—ã": "–Ø Telegram-—á–∞—Ç-–±–æ—Ç.",
        "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å": "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–±—É—á–∞—Ç—å—Å—è."
    }

    if user_input in simple_responses:
        update.message.reply_text(simple_responses[user_input])
        return

    answer = search_knowledge_base(user_input)
    if answer and "–Ω–µ –Ω–∞—à—ë–ª" not in answer.lower():
        update.message.reply_text(answer)
    else:
        internet_answer = search_internet(user_input)
        update.message.reply_text(f"üîç {internet_answer}")
        context.user_data['last_q'] = user_input
        context.user_data['last_a'] = internet_answer
        update.message.reply_text("–•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç? –ù–∞–ø–∏—à–∏: /save")

def save(update: Update, context: CallbackContext):
    question = context.user_data.get('last_q')
    answer = context.user_data.get('last_a')
    if question and answer:
        save_to_db(question, answer)
        update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.")
    else:
        update.message.reply_text("‚ö†Ô∏è –ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")

def main():
    updater = Updater(API_KEY, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("save", save))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
